{"version":3,"sources":["components/CedulaFinder.js","components/CedulaSearch.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","getLicenseInfo","license","get","proxy","params","fl","rows","wt","q","crossDomain","makeServerQuery","then","res","data","response","docs","CedulaSearch","state","query","result","searchAndSetResults","info","console","log","_this","setState","handleChange","event","target","value","this","react_default","a","createElement","Grid","Column","computer","tablet","mobile","verticalAlign","Header","Segment","Row","Input","type","onChange","noGutters","CedulaSearch_SearchResults","Component","SearchResults","props","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","nextProps","nextContext","undefined","nombre","_this$state$result","anioRegistro","institucion","genero","id","materno","numCedula","paterno","titulo","timestamp","tipo","Card","centered","className","Content","Meta","Description","concat","Container","as","App","components_CedulaSearch","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.360aff3a.chunk.js","sourcesContent":["const axios = require('axios/index');\n\nexport function makeServerQuery(license){\n    const proxy = 'https://cors-anywhere.herokuapp.com/';\n    const url = \"http://search.sep.gob.mx/solr/cedulasCore/select?'\";\n\n    return axios.get(proxy+url, {\n        params:{\n            fl:'*,score',\n            rows: 1,\n            wt: 'json',\n            q: license,\n        },\n        crossDomain: true,\n    });\n}\n\nexport function getLicenseInfo(license){\n    return makeServerQuery(license).then(res => {\n        return res.data.response.docs[0];\n    });\n}\n\n\n","import React, {Component} from 'react';\nimport {Card, Container, Grid, Header, Input, Search, Segment} from \"semantic-ui-react\";\nimport {getLicenseInfo} from \"./CedulaFinder\";\n\nclass CedulaSearch extends Component {\n    state = {\n        query: '1629426',\n        result: {}\n    };\n\n    componentDidMount() {\n        this.searchAndSetResults(this.state.query);\n    }\n\n    searchAndSetResults = (query) =>{\n        getLicenseInfo(query).then( info => {\n                console.log(info);\n                this.setState({result: info});\n            }\n        );\n    };\n\n    handleChange = (event) =>{\n        const query = event.target.value;\n        this.setState({query});\n        this.searchAndSetResults(query);\n    };\n\n\n    render() {\n        return (\n            <Grid.Column computer={5} tablet={8} mobile={16} verticalAlign={'middle'}>\n                <Header>Buscador de cédulas profesionales</Header>\n                <Segment>\n                    <Grid.Row>\n                        <Input type={'number'} value={this.state.query} onChange={this.handleChange}/>\n                    </Grid.Row>\n                    <Grid.Row noGutters>\n                        <SearchResults result={this.state.result}/>\n                    </Grid.Row>\n                </Segment>\n            </Grid.Column>\n        );\n    }\n}\n\nclass SearchResults extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            result: this.props.result,\n        };\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        this.setState({result: nextProps.result});\n    }\n\n\n    render() {\n        if(this.state.result && this.state.result.nombre !== undefined){\n            const { anioRegistro, genero, id, institucion, materno, nombre, numCedula, paterno, timestamp, tipo, titulo\n            } = this.state.result;\n            return (\n                <Card centered className={'results'}>\n                    <Card.Content>\n                        <Card.Header>{numCedula}</Card.Header>\n                        <Card.Meta>Cédula profesional </Card.Meta>\n                        <Card.Description>\n                            <p>{`${paterno} ${materno} ${nombre}`}</p>\n                            <p>{titulo}</p>\n                            <p>{institucion}</p>\n                            <p>{anioRegistro}</p>\n                        </Card.Description>\n                    </Card.Content>\n                </Card>\n            );\n        }else{\n            return (\n                <Container className={'results'}>\n                    <Header as={'h3'}>Sin resultados</Header>\n                </Container>\n            );\n\n        }\n    }\n}\n\nexport default CedulaSearch;","import React from 'react';\nimport './App.css';\nimport {Grid} from \"semantic-ui-react\";\nimport CedulaSearch from \"./components/CedulaSearch\";\n\n\nfunction App() {\n    return (\n        <Grid centered className={'App'}>\n            <CedulaSearch />\n        </Grid>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}