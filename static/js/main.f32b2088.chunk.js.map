{"version":3,"sources":["components/CedulaFinder.js","components/CedulaSearch.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","getLicenseInfo","license","get","params","fl","rows","wt","q","makeServerQuery","then","res","data","response","docs","CedulaSearch","state","query","result","searchAndSetResults","info","console","log","_this","setState","handleChange","event","target","value","this","react_default","a","createElement","Grid","Column","width","verticalAlign","Segment","Row","Input","onChange","CedulaSearch_SearchResults","Component","SearchResults","props","_this2","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","nextProps","nextContext","_this$state$result","anioRegistro","institucion","genero","id","materno","nombre","numCedula","paterno","titulo","timestamp","tipo","Container","className","Header","as","concat","App","centered","components_CedulaSearch","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f32b2088.chunk.js","sourcesContent":["const axios = require('axios/index');\n\nexport function makeServerQuery(license){\n    return axios.get(\"/search\", {\n        params:{\n            fl:'*,score',\n            rows: 1,\n            wt: 'json',\n            q: license,\n        }\n    });\n}\n\nexport function getLicenseInfo(license){\n    return makeServerQuery(license).then(res => {\n        return res.data.response.docs[0];\n    });\n}\n\n\n","import React, {Component} from 'react';\nimport {Container, Grid, Header, Input, Search, Segment} from \"semantic-ui-react\";\nimport {getLicenseInfo} from \"./CedulaFinder\";\n\nclass CedulaSearch extends Component {\n    state = {\n        query: '1629426',\n        result: {}\n    };\n\n    componentDidMount() {\n        this.searchAndSetResults(this.state.query);\n    }\n\n    searchAndSetResults = (query) =>{\n        getLicenseInfo(query).then( info => {\n                console.log(info);\n                this.setState({result: info});\n            }\n        );\n    };\n\n    handleChange = (event) =>{\n        const query = event.target.value;\n        this.setState({query});\n        this.searchAndSetResults(query);\n    };\n\n\n    render() {\n        return (\n            <Grid.Column width={'5'} verticalAlign={'middle'}>\n                <Segment>\n                    <Grid.Row>\n                        <Input value={this.state.query} onChange={this.handleChange}/>\n                    </Grid.Row>\n                    <Grid.Row>\n                        <SearchResults result={this.state.result}/>\n                    </Grid.Row>\n                </Segment>\n            </Grid.Column>\n        );\n    }\n}\n\nclass SearchResults extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            result: this.props.result,\n        };\n    }\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        this.setState({result: nextProps.result});\n    }\n\n\n    render() {\n        if(this.state.result){\n            const { anioRegistro, genero, id, institucion, materno, nombre, numCedula, paterno, timestamp, tipo, titulo\n            } = this.state.result;\n            return (\n                <Container className={'results'}>\n                    <Header as={'h3'}>CÃ©dula profesional</Header>\n                    <p>{numCedula}</p>\n                    <p>{`${paterno} ${materno} ${nombre}`}</p>\n                    <p>{titulo}</p>\n                    <p>{institucion}</p>\n                    <p>{anioRegistro}</p>\n                </Container>\n            );\n        }else{\n            return (\n                <Container className={'results'}>\n                    <Header as={'h3'}>Sin resultados</Header>\n                </Container>\n            );\n\n        }\n    }\n}\n\nexport default CedulaSearch;","import React from 'react';\nimport './App.css';\nimport {Grid} from \"semantic-ui-react\";\nimport CedulaSearch from \"./components/CedulaSearch\";\n\n\nfunction App() {\n    return (\n        <Grid centered className={'App'}>\n            <CedulaSearch />\n        </Grid>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}